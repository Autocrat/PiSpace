
#include <SDL2/SDL.h>
#include <SDL2/SDL_opengles2.h> 

#include <iostream>
#include <fstream>
#include <string>

#include "Ship.h"
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/transform.hpp>


//function prototype
void setupDisplay(int screenx=1920, int screeny=1080, int flags=0);

glm::vec4 cameraPosition(0.5,0.3,0.5,1);
glm::vec4 target;

//global variables to handle the SDL display
SDL_Window *pWindow = 0;
SDL_GLContext glContext;

int main(int argc, char *argv[])
{
    glm::vec4 viewTarget(0.0f,0.0f,-1.0f,1.0f);    
    glm::vec3 yaxis(0.0f,1.0f,0.0f);
    glm::vec3 xaxis(1.0f,0.0f,0.0f);

    if(argc > 1)
    {
        std::cout << argv[1] << std::endl;
        std::string argument = argv[1];
        if(argument == "-debug")
        {
            //set up some paramters or something 
        }
    }

   
    cameraPosition = glm::vec4(0.0f,0.0f,0.1f,1.0f);
    viewTarget=glm::vec4(cameraPosition.x, cameraPosition.y, cameraPosition.z -1, 0.0f);

    setupDisplay();
//    glEnable(GL_DEPTH_TEST);
//    glDepthFunc(GL_LESS);
    
    //clear the double buffers in hopes that 
    //it will clear EVERYTHING
    glClearColor(0.0f,0.0f,0.0f,1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    Ship ship;
    ship.Draw();
    //initial display
    SDL_GL_SwapWindow(pWindow);

    bool bQuit = false;
    SDL_Event event;

    //Set it up so it automatically quits after 10 seconds
    int timestamp = SDL_GetTicks();    



    while(!bQuit)
    {
        while(SDL_PollEvent(&event))
        {            
            switch(event.type)
            {
            case SDL_QUIT:
                bQuit=true;
                break;
            case SDL_KEYDOWN:
            {
                switch(event.key.keysym.sym)
                {
                case SDLK_q:
                    bQuit = true;
                    break;
                case SDLK_d:
                    break;
                case SDLK_a:
                    break;
                case SDLK_w:
                    break;
                case SDLK_s:
                    break;
                case SDLK_z:
                    break;
                case SDLK_x:
                    break;
                case SDLK_LEFT:
                    break;
                case SDLK_RIGHT:
                    break;
                case SDLK_UP:
                    break;
                case SDLK_DOWN:
                    break;
                case SDLK_SPACE:
                    break;

                default:
                    break;
                }


                glClearColor(0.0f,0.0f,0.0f,1.0f);
                glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
                ship.Draw();
                SDL_GL_SwapWindow(pWindow);
                break;
            }
            default:
                break;
            }
        }

        SDL_Delay(100);
        // SDL_Event dummy;
        // dummy.type = SDL_KEYDOWN;
        // dummy.key.keysym.sym = SDLK_LEFT;
        // SDL_PushEvent(&dummy);

        if((SDL_GetTicks() - timestamp) > 60000)
        {
            bQuit = true;
        }
    }



    //clean up everything set up by the display
    SDL_GL_DeleteContext(glContext);
    SDL_DestroyWindow(pWindow);
    pWindow = 0;
    SDL_Quit();
}




//****************************************************************
//Basic SDL2 setup of a screen for OpenGL
void setupDisplay(int screenx, int screeny, int flags)
{
    int FLAGS = SDL_WINDOW_FULLSCREEN | SDL_WINDOW_OPENGL;
    if (flags != 0)
    {
        FLAGS=flags;
    }

    if(SDL_Init(SDL_INIT_VIDEO) == -1)
    {
        std::cout << "Unable to init SDL" << std::endl;
        exit(1);
    }

    SDL_DisableScreenSaver();
    pWindow = SDL_CreateWindow(
        "SDL2 OpenGL Test program", 
        SDL_WINDOWPOS_UNDEFINED,
        SDL_WINDOWPOS_UNDEFINED,
        screenx,
        screeny,
        FLAGS);

    if(!pWindow)
    {
        std::cerr << "Unable to create SDL window" << std::endl;
    }
    
    
    glContext = SDL_GL_CreateContext(pWindow);
    //just use the max size for the GL Viewport
    glViewport(0,0,1920,1080);
}



